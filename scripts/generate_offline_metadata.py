import os

from tqdm import tqdm
from config import DATA_DIR, METADATA_TRAIN_DIR, SYNTHETIC_METADATA_TRAIN_DIR
import pandas as pd

data_dir = os.path.join(
    DATA_DIR, "offline_computed_dataset")

offline_images_dir = os.path.join(data_dir, "offline_images")
low_threshold_dir = os.path.join(data_dir, "gradcam_70")
high_threshold_dir = os.path.join(data_dir, "gradcam_110")
train_dir = os.path.join(offline_images_dir, "train")
val_dir = os.path.join(offline_images_dir, "val")
test_dir = os.path.join(offline_images_dir, "test")
new_metadata_train_dir = os.path.join(data_dir, "metadata_train.csv")
new_metadata_val_dir = os.path.join(data_dir, "metadata_val.csv")
new_metadata_test_dir = os.path.join(data_dir, "metadata_test.csv")


def generate(images_dir: str, new_metadata_dir: str):
    """
    Function to generate the metadata csv file from the offline_generated_dataset generated by generate_grad_cams.py.
    """
    og_metadata = pd.read_csv(METADATA_TRAIN_DIR)
    new_metadata = {}
    for filename in tqdm(os.listdir(images_dir), desc=f"Generating metadata {new_metadata_dir}..."):
        if not filename.endswith(".png"):
            continue
        reference_image = f'{filename.split("_")[0]}_{filename.split("_")[1]}'.replace(
            ".png", "")
        clean_image_name = filename.replace(".png", "")
        dx = og_metadata[og_metadata["image_id"]
                         == reference_image]["dx"].values[0]
        new_metadata[filename] = {
            "dx": dx,
            "image_id": clean_image_name}

    new_metadata = pd.DataFrame.from_dict(new_metadata, orient="index")
    new_metadata.reset_index(inplace=True)
    new_metadata.drop(columns=["index"], inplace=True)
    new_metadata.to_csv(new_metadata_dir)


if __name__ == "__main__":
    # generate(train_dir, new_metadata_train_dir)
    generate(val_dir, new_metadata_val_dir)
    generate(test_dir, new_metadata_test_dir)
